// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "Spawn.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Character } from "./Character";
/**
 * @generated from protobuf message Spawn
 */
export interface Spawn {
    /**
     * @generated from protobuf field: Character character = 1;
     */
    character?: Character;
    /**
     * @generated from protobuf field: optional bool canMove = 2;
     */
    canMove?: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class Spawn$Type extends MessageType<Spawn> {
    constructor() {
        super("Spawn", [
            { no: 1, name: "character", kind: "message", T: () => Character },
            { no: 2, name: "canMove", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Spawn>): Spawn {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Spawn>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Spawn): Spawn {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Character character */ 1:
                    message.character = Character.internalBinaryRead(reader, reader.uint32(), options, message.character);
                    break;
                case /* optional bool canMove */ 2:
                    message.canMove = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Spawn, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Character character = 1; */
        if (message.character)
            Character.internalBinaryWrite(message.character, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional bool canMove = 2; */
        if (message.canMove !== undefined)
            writer.tag(2, WireType.Varint).bool(message.canMove);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Spawn
 */
export const Spawn = new Spawn$Type();
